1.初始化
from flask import Flask
app=Flask(__name__)    #__name__参数指程序主模块或包名
2.路由和视图函数       
@app.route('/')        #路由，描述URL到Python函数的映射关系
def index():           #app.route修饰器把修饰的函数注册为路由
   return '<h1>Hello world!</h1>'
@app.route('/user/<name>')  #路由中支持<>中的动态名字
def user(name):        #支持int/float/path修饰,如<int:id>
   return '<h1>Hello, %s!</h1>' % name
3.启动服务器
if __name__ == '__main__':  #用run启动Flask集成的开发Web服务器
   app.run([host='0.0.0.0', port='80' ,]debug=True)
4.请求上下文
Flask使用上下文让特定的变量在一个线程中全局可访问，与此同时却不会干扰其他线程
Flask有2中上下文：
(1)程序上下文 current_app , g(处理请求时用作临时存储的对象)
(2)请求上下文 request , session(存储请求之间需要记住的值)
在程序实例上调用app.app_context()可获得一个程序上下文
5.URL映射         
app.url_map
Map([<Rule '/' (HEAD,OPTIONS,GET) -> index>,
    <Rule '/static/<filename>' (HEAD,OPTIONS,GET) -> static>])
HEAD,OPTIONS,GET是请求方法，由路由进行处理.Flask为每个路由指定请求方法；
HEAD和OPTIONS方法由Flask自动处理。
6.请求钩子
Flask提供注册通用函数功能，注册的函数可在请求被分发到视图函数之前或之后调用。
请求钩子使用修饰器实现，有4种钩子：
before_first_request: 第一次请求之前
before_request: 每次请求之前
after_request: 没有抛出异常，每次请求之后
teardown_request: 即使抛出异常，也在每次请求之后执行
在请求钩子函数he视图函数之间共享数据一遍使用g，如g.user
7.响应
状态码：正常处理 200，请求无效 400，重定向 302, 错误 404
状态码作为视图函数返回的响应的第二个参数，如
@app.route('/')
def index():
    return '<h1>Bad Request</h1>',400
可选的第三个参数是由首部header组成的字典，不常用
以上模式返回一个元组，还可以返回一个Response对象
def index():
    response = make_response('<h1>This document carries a cookie!</h1>')
    response.set_cookie('answer','42')
    return response
重定向可使用redirect()辅助函数
def index():
    return redirect('http://www.example.com')
抛出异常并返回错误，用abort函数，如abort(404)
abort抛出异常并把控制权交给web服务器
8.Flask扩展
flask扩展都在flask.ext下. 以flask-script扩展为例：
安装 pip install flask-script
使用 from flask.ext.script import Manager
     manager = Manager(app)
     #......
     if __name__ ==  '__main__':
	manager.run()
用途 在命令行设置flask web的启动参数，如
     python hello.py runserver --host 0.0.0.0 --port 80
9.模板 (Jinja2)
模板：是一个包含响应文本的文件，其中包含占位变量表示的动态部分
templates/user.html
<h1>Hello, {{ name }}!</h1>
渲染：用真实值替换变量，再返回最终得到的响应字符串的过程称为渲染
from flask import Flask, render_template
#......
@app.route('/user/<name>')
def user(name):
    return render_template('user.html', name=name)
Jinja2能识别所有类型的变量，包括列表、字典、对象
过滤器：可用来修改变量，格式: 变量|过滤器，如 {{ name|capitalize }}
常用变量过滤器有：safe,capitalize,lower,title,trim,striptags
控制结构：{% if var %}, {% else %}, {% endif %}
    {% for var in collection %}, {% endfor %}
宏： {% macro macro_func(argn) %}, {% endmacro %}
  为重复使用宏，可将宏保存在单独的文件中，在需要时导入
  {% import 'macros.html' as macros %}
模板的复用：(1)导入 {% include 'common.html' %}
(2)模板继承 首先定义一个基础模板，如base.html,并定义block标签
    子模板 {% extends "base.html" %} 并重写需要定制的block
    重新定义的block可调用super()获取原来的内容
10.bootstrap扩展
pip install flask-bootstrap